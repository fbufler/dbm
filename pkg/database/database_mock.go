// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/database.go
//
// Generated by this command:
//
//	mockgen -source pkg/database/database.go
//
// Package mock_database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Connect mocks base method.
func (m *MockDatabase) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDatabaseMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabase)(nil).Connect))
}

// Identifier mocks base method.
func (m *MockDatabase) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockDatabaseMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockDatabase)(nil).Identifier))
}

// SetupTestTable mocks base method.
func (m *MockDatabase) SetupTestTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupTestTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupTestTable indicates an expected call of SetupTestTable.
func (mr *MockDatabaseMockRecorder) SetupTestTable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupTestTable", reflect.TypeOf((*MockDatabase)(nil).SetupTestTable), ctx)
}

// Test mocks base method.
func (m *MockDatabase) Test(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockDatabaseMockRecorder) Test(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockDatabase)(nil).Test), ctx)
}

// TestRead mocks base method.
func (m *MockDatabase) TestRead(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRead", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestRead indicates an expected call of TestRead.
func (mr *MockDatabaseMockRecorder) TestRead(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRead", reflect.TypeOf((*MockDatabase)(nil).TestRead), ctx)
}

// TestWrite mocks base method.
func (m *MockDatabase) TestWrite(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWrite", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestWrite indicates an expected call of TestWrite.
func (mr *MockDatabaseMockRecorder) TestWrite(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWrite", reflect.TypeOf((*MockDatabase)(nil).TestWrite), ctx)
}
